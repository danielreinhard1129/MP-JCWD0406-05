// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  nama_lengkap    String
  username        String   @unique
  email           String   @unique
  password        String
  refferal_number String   @unique
  contact         Int      @default(62)
  alamat          String   @default("")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  roleId          Int
  role            Role     @relation(fields: [roleId], references: [id])
  Point           Point[]

  UserReward  UserReward[]
  Event       Event[]
  Transaction Transaction[]
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String
  users User[]
}

model Point {
  id      Int      @id @default(autoincrement())
  userId  Int      @unique
  amount  Int      @default(0) // Jumlah poin yang diperoleh, default diatur ke 0
  expired DateTime
  user    User     @relation(fields: [userId], references: [id])
}

model UserReward {
  id                      Int                       @id @default(autoincrement())
  userId                  Int
  rewardId                Int
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  expired                 DateTime
  user                    User                      @relation(fields: [userId], references: [id])
  reward                  Reward                    @relation(fields: [rewardId], references: [id])
  Transaction_user_reward Transaction_user_reward[]
}

model Reward {
  id         Int          @id @default(autoincrement())
  title      String
  percantage Int
  UserReward UserReward[]
}

model Event {
  id          Int           @id @default(autoincrement())
  tittle      String
  description String
  price       Int
  locationId  Int
  startDate   DateTime
  endDate     DateTime
  limit       Int
  booked      Int
  banner      String
  category    Int
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  location    Location      @relation(fields: [locationId], references: [id])
  transaction Transaction[]
}

model Location {
  id        Int      @id @default(autoincrement())
  city      String
  country   String
  createdAt DateTime @default(now())
  Event     Event[]
}

model Category {
  id     Int    @id @default(autoincrement())
  tittle String
}

model Transaction {
  id                      Int                       @id @default(autoincrement())
  uuid                    String                    @unique @default(uuid())
  userId                  Int
  eventId                 Int
  qty                     Int                       @default(0)
  total                   Int                       @default(0)
  paymentProof            String                    @default("")
  statusId                Int                       @default(1)
  points                  Int                       @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  user                    User                      @relation(fields: [userId], references: [id])
  event                   Event                     @relation(fields: [eventId], references: [id])
  Transaction_user_reward Transaction_user_reward[]
  status                  Status                    @relation(fields: [statusId], references: [id])
}

model Status {
  id          Int           @id @default(autoincrement())
  title       String
  createdAt   DateTime      @default(now())
  Transaction Transaction[]
}

model Transaction_user_reward {
  id            Int         @id @default(autoincrement())
  userRewardId  Int
  transactionId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          UserReward  @relation(fields: [userRewardId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}
